
substitutions:
  hostid: office_window
  hostname: Office Window
  comment: Window sensor and roller blinds controller
  node_platform: ESP8266
  node_board: d1_mini
    
  
packages:
  core: !include common/core.yaml # https://github.com/slimcdk/home-server/blob/master/services/esphome/common/core.yaml
  basic_sensors: !include common/basic_sensors.yaml # https://github.com/slimcdk/home-server/blob/master/services/esphome/common/basic_sensors.yaml
    

esphome:
  on_boot:
    then:
      - lambda: 'id(cover_stepper).set_target( -id(current_cover_position) );'
  on_shutdown:
    then:
      - globals.set:
          id: current_cover_position
          value: !lambda 'return id(cover_stepper).current_position;'


globals:
  - id: cover_open_position
    type: int
    restore_value: yes
    initial_value: '0'
    
  - id: cover_closed_position
    type: int
    initial_value: '138500'
    
  - id: current_cover_position
    type: int
    initial_value: '0'

 
 
text_sensor:
  - !include utils/wifi_textsensor.yaml
  - !include utils/esphome_version_textsensor.yaml
 
 
switch:
  - !include utils/restart_switch.yaml


binary_sensor:
  - !include utils/status_binarysensor.yaml


stepper:
  - platform: a4988
    id: cover_stepper
    sleep_pin: D2
    step_pin: D3
    dir_pin: D4
    max_speed: 5000 steps/s


sensor:
  - !include utils/wifi_sensor.yaml
  - !include utils/uptime_sensor.yaml

  - platform: template
    name: ${upper_devicename} Cover Position
    id: cover_position
    lambda: !lambda 'return (float(id(cover_stepper).current_position - id(cover_closed_position)) / (id(cover_open_position) - id(cover_closed_position)));'
    internal: true
    update_interval: 1s
    filters:
      - or:
        - throttle: 5s
        - delta: 5.0
    on_value:
      then:
        - cover.template.publish:
            id: ${devicename}_cover
            state: !lambda 'return x;'  



cover:
  - platform: template
    device_class: shade
    name: ${upper_devicename}
    id: ${devicename}_cover
    open_action:
      - stepper.set_target:
          id: cover_stepper
          target: !lambda 'return id(cover_open_position);'

    close_action:
      - stepper.set_target:
          id: cover_stepper
          target: !lambda 'return id(cover_closed_position);'
    
    stop_action:
      - stepper.set_target:
          id: cover_stepper
          target: !lambda 'return id(cover_stepper).current_position;'
    
    position_action:
      - stepper.set_target:
          id: cover_stepper
          target: !lambda 'return ((0-pos)+1) * id(cover_closed_position);'
